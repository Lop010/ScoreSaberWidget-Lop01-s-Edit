{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "yellow",
    "glyph" : "tv"
  },
  "name" : "ScoreSaber Top Play",
  "script" : "\/\/ HUGE THANK YOU TO CKOSMIC FOR THE ORIGINAL SCRIPT\n\nlet user_id = args.widgetParameter;\n\nconst api_url = \"https:\/\/scoresaber.com\"\n\n\/\/ If user ID is not provided, grab player #1's user ID\nif(user_id == null || user_id == \"\" || user_id == undefined) {\n  const req = new Request(api_url + \"\/api\/players\")  \n  const res = await req.loadJSON()\n  \n  user_id = \"76561198261729925\"\n}\n\n\/\/ change the user id to the one of your choice\n\n\/\/ user_id = \"76561198131208517\"\n\nconst fullApi = api_url + \"\/api\/player\/\" + user_id + \"\/full\"\nconst pScores = api_url + \"\/api\/player\/\" + user_id + \"\/scores?limit=1&sort=top&page=1&withMetadata=true\"\n\n\n\nconst ySegments = 4\n\nconst req = new Request(fullApi)\nconst res = await req.loadJSON()\nconst reqScore = new Request(pScores)\nconst resScore = await reqScore.loadJSON()\n\nconst flag = \"https:\/\/scoresaber.com\/imports\/images\/flags\/\" + res.country.toLowerCase() + \".png\"\nconst flag_i = await new Request(flag)\nconst flagImg = await flag_i.loadImage()\n\nconst avatar = res.profilePicture\nconst avatar_i = await new Request(avatar)\nconst avatarImg = await avatar_i.loadImage()\n\nconst songPic_a = resScore.playerScores[0].leaderboard.coverImage\nconst songPic_i = await new Request(songPic_a)\nconst songPic = await songPic_i.loadImage() \n\nconst isf1 = \"https:\/\/media.discordapp.net\/attachments\/730982832893198388\/919799436358602823\/IMG_7350.png\"\nconst isf_i = await new Request(isf1)\nconst isfM = await isf_i.loadImage()\n\nconst mScore = resScore.playerScores[0].leaderboard.maxScore\n\nlet bScore = resScore.playerScores[0].score.baseScore\n\n\nconst perP = resScore.playerScores[0].score.pp\n\nconst denyah1 = \"https:\/\/cdn.discordapp.com\/attachments\/730982832893198388\/919806611499941958\/Image_15.jpg\"\nconst denyah_i = await new Request(denyah1)\nconst denyah = await denyah_i.loadImage()\n\nlet songnam = resScore.playerScores[0].leaderboard.songName\nconst songi = await new Request(songnam)\nconst songname = await songi\n\nconst graphRect = new Rect(120, 338, 540, 300)\n\nconst locales = {\n  ranking_big: \"Player Ranking: #\",\n  pp_big: \"Performance Points: \",\n  play_big: \"Play Count: \",\n  score_big: \"Total Score: \",\n  acc_big: \"Average Accuracy: \",\n  ranking_small: \"Rank: #\",\n  pp_small: \"\",\n  play_small: \"\",\n  score_small: \"\",\n  acc_small: \"\",\n  cr_big: \"Country Rank:\"\n}\n\nlet widgetSize = \"big\"\nlet context = new DrawContext()\nswitch(config.widgetFamily) {\n  case \"small\":\n    context.size = new Size(360, 360)\n    widgetSize = \"small\"\n    break;\n  case \"medium\":\n    context.size = new Size(720, 360)\n    widgetSize = \"big\"\n    break;\n  case \"large\":\n    context.size = new Size(720, 720)\n    widgetSize = \"big\"\n    break;\n  default:\n    context.size = new Size(720, 720)\n    widgetSize = \"big\"\n    break;\n}\ncontext.opaque = false\nlet widget = createWidget()\nwidget.backgroundImage = context.getImage()\nconst refreshMinutes = 30\nlet now = new Date()\nlet later = new Date(now.getTime() + refreshMinutes * 60000)\nwidget.refreshAfterDate = later\n\nawait widget.presentLarge()\n\nScript.setWidget(widget)\nScript.complete()\n\nfunction createWidget() {\n  let w = new ListWidget()\n  w.backgroundColor = new Color(\"#6a4b7a\", 0.4)\n\n  \n  let headerStack = w.addStack()\n  headerStack.centerAlignContent()\n  headerStack.url = \"https:\/\/scoresaber.com\/u\/\" + user_id\n  if(widgetSize == \"small\")\n    headerStack.addSpacer(null)\n  \n  \n  if(widgetSize == \"small\") {\n    let image = headerStack.addImage(avatarImg)\n    image.imageSize = new Size(100, 100)\n    image.cornerRadius = 25\n    headerStack.addSpacer(null)\n  } else {\n    let image = headerStack.addImage(avatarImg)\n    image.imageSize = new Size(40, 40)\n    image.cornerRadius = 10\n    headerStack.addSpacer(10)\n    }\n    \n  let titleElement = null\n  if(widgetSize == \"big\"){ \n    if(res.name.length > 13){\n      let playerName = res.name.substring(0, 13)\n  titleElement = headerStack.addText(playerName + \"...\")\n} else {\n  titleElement = headerStack.addText(res.name)\n }\n  titleElement.textColor = new Color(\"#ffffff\", 1)\n  titleElement.textOpacity = 1\n  titleElement.font = Font.mediumRoundedSystemFont(18)\n  titleElement.lineLimit = 1\n  \n  if(user_id == \"76561198064659288\"){\n    \n    let pointYah = new Point(50, 50)\n    context.drawImageAtPoint(denyah, pointYah)\n    let pntYah = new Rect(200, 680, 500, 50)\n    drawTextR(\"DM Raz0rBeam with instructions on how to get rid of this\", pntYah, Color.white(), Font.lightRoundedSystemFont(20))\n}\n\n  if(user_id == \"76561198017040275\"){\n    let isfmoment = headerStack.addImage(isfM)\n  isfmoment.imageSize = new Size(300, 300)\nlet pntYah = new Rect(100, 530, 500, 50)\ndrawTextR(\"DM Raz0rBeam with instructions on how to get rid of this\", pntYah, Color.white(), Font.lightRoundedSystemFont(20))\n}\n\n}\n\/\/ Song Cover \n  if(widgetSize == \"big\"){\n  const r = new Rect(475, 65, 150, 150)\n  let cImage = context.drawImageInRect(songPic, r)\n  \n  if(config.widgetFamily == \"medium\"){\n    let l1 = new Point(416, 0)\n    let l2 = new Point(416, 500)\n    drawLine(l1, l2, 3, Color.gray())\n  } else {\n  let l1 = new Point(416, 10)\n  let l2 = new Point(416, 290)\n  drawLine(l1, l2, 3, Color.gray())\n}\n\/\/Song Name\n    let songnRect = new Rect(440, 235, 400, 400)\n\n  if(songnam.length > 25){\n    let namesong = songnam.substring(0, 25)\n    let song = drawTextR((namesong + \"...\"), songnRect, Color.white(), Font.mediumRoundedSystemFont(20))\n} else {\n  let song = drawTextR(songnam, songnRect, Color.white(), Font.mediumRoundedSystemFont(20))\n}\n\/\/ acc\n  let accRect = new Rect(455, 270, 200, 150)\n  let accCalc = bScore \/ mScore\n  let stringAcc = accCalc.toString()\n  let rAcc1 = stringAcc.substring(2, 4)\n  let rAcc2 = stringAcc.substring(5, 6)\n  \n  let acc = drawTextR((rAcc1 + \".\" + rAcc2 + \"% - \" + perP + \"pp\"), accRect, Color.white(), Font.mediumRoundedSystemFont(20))\n\n  let ltRect = new Rect(505, 30, 200, 200)\n  let lateText = drawTextR(\"Top Play\", ltRect, Color.white(), Font.mediumRoundedSystemFont(25))\n}\n\n\n  \n\n  \n\n\n  w.addSpacer(10)\n  \n  let rankStack = w.addStack()\n  if(widgetSize == \"small\"){\n  rankStack.addSpacer(null)\n}\n  let rankElement = rankStack.addText(locales[\"ranking_\"+widgetSize] + formatNumber(res.rank))\n  rankElement.centerAlignText()\n  rankElement.textColor = Color.white()\n  rankElement.font = Font.mediumMonospacedSystemFont(12)\n\n\nif(widgetSize == \"big\"){\n  let newstack = w.addStack()\n  let countryRankElement = newstack.addText(locales[\"cr_\"+widgetSize] + \" #\" + formatNumber(res.countryRank) + \" \")\n\nimage = newstack.addImage(flagImg)\nimage.imageSize = new Size(14, 9)\nimage.centerAlignImage()\n\ncountryRankElement.centerAlignText()\ncountryRankElement.font = Font.lightRoundedSystemFont(12)\n  countryRankElement.textColor = Color.white()\nrankStack.centerAlignContent()\n}\n\n\nif(widgetSize == \"small\"){\n  rankStack.addSpacer(null)}\n\nif(widgetSize == \"big\"){\n  let ppElement = w.addText(locales[\"pp_\"+widgetSize] + formatNumber(res.pp) + \"pp\")\n  if (widgetSize == \"big\"){\n  ppElement.textColor = Color.white()\n  ppElement.font = Font.lightRoundedSystemFont(12)\n}\n}\n  if(widgetSize == \"big\"){\n    let plyElement = w.addText(locales[\"play_\"+widgetSize] + formatNumber(res.scoreStats.totalPlayCount))\n\n    plyElement.textColor = Color.white()\n    plyElement.font = Font.lightRoundedSystemFont(12)\n  \n    let scoreElement = w.addText(locales[\"score_\"+widgetSize] + formatNumber(res.scoreStats.totalScore))\n    scoreElement.textColor = Color.white()\n    scoreElement.font = Font.lightRoundedSystemFont(12)\n   \n  \n  let accElement = w.addText(locales[\"acc_\"+widgetSize] + Math.ceil(res.scoreStats.averageRankedAccuracy * 100) \/ 100 + \"%\")\n  accElement.textColor = Color.white()\n  accElement.font = Font.lightRoundedSystemFont(12)\n  if(widgetSize == \"small\") \n    accElement.centerAlignText()\n }\n\n\n  \/\/ Badges: all of this is basically worthless, but it breaks if i get rid of it and its not causing any harm so(some of this is actually important so dont delete it)\n  let badgeX = 480\n  let badgeY = 100\n\n  \n  if(context.drawImageAtPoint = 0){\n    badges.addImage(avatarImg)\n    badges.imageSize = (100, 100)\n    badges.cornerRadius = 10\n    badges.addText(resScore)\n    badges.font = Font.blackMonospacedSystemFont(12)\n  }\n  \n  \n  \n  if(config.widgetFamily == \"large\" || config.widgetFamily == null) {\n  \n    w.addSpacer(null)\n  \n    let history = res.histories.split(\",\")  \n    history.push(res.rank)\n    let min = Infinity\n    let max = 0\n  \n    for(let i = 0; i < history.length; i++) {\n      let tmp = parseInt(history[i])\n      min = (tmp < min ? tmp : min)\n      max = (tmp > max ? tmp : max)\n    }\n  \n    let base = 100000\n    let cmp = max - min\n    if(cmp >= 0 && cmp <= 10) base = 4\n    else if(cmp > 10 && cmp <= 100) base = 10\n    else if(cmp > 100 && cmp <= 1000) base = 100\n    else if(cmp > 1000 && cmp <= 10000) base = 1000\n    else if(cmp > 10000 && cmp <= 100000) base = 10000\n  \n    min = Math.floor(min \/ base) * base\n    max = Math.ceil(max \/ base) * base\n    if(min == 1) min = 0\n    if(max == 1) max = 2\n  \n    \/\/ Axis lines\n    let p1 = new Point(graphRect.minX, graphRect.minY);    \n    let p2 = new Point(graphRect.minX, graphRect.maxY); \n    drawLine(p1, p2, 1, Color.gray())\n    p1 = new Point(graphRect.minX, graphRect.maxY);    \n    p2 = new Point(graphRect.maxX, graphRect.maxY); \n    drawLine(p1, p2, 1, Color.gray())\n  \n    let steps = base * Math.ceil((max - min) \/ base) \/ ySegments\n  \n    \/\/ Y axis lines (rank range)\n    let index = 0\n    let y = 0\n    while(y  < max) {\n      y = min + index * steps\n    \n      if(y % 1 == 0) {\n        let lineY = lerp(graphRect.minY, graphRect.maxY, percent(y, min, max))\n        p1 = new Point(graphRect.minX, lineY)\n        p2 = new Point(graphRect.maxX, lineY)\n  \n        drawLine(p1, p2, 1, Color.gray())\n    \n        context.setTextAlignedRight()\n        const rankRect = new Rect(0, lineY-11, 100, 23);\n        drawTextR(y + \"\", rankRect, Color.gray(), Font.boldRoundedSystemFont(19));  \n      }\n  \n      index++\n    }\n  \n    \/\/ X axis lines (days ago)\n    for(let i = 0; i < 5; i++) {\n      let x = lerp(0, history.length, i\/4)\n    \n      let lineX = lerp(graphRect.minX, graphRect.maxX, i\/4)  \n      p1 = new Point(lineX, graphRect.minY)\n      p2 = new Point(lineX, graphRect.maxY)\n    \n      drawLine(p1, p2, 1, Color.gray())\n    \n      context.setTextAlignedCenter()\n      const rankRect = new Rect(lineX-50, graphRect.y+320, 100, 23);  \n      let text = (history.length - Math.floor(x)) + \"\"  \n      if(text == 0) text = \"now\"\n\t  drawTextR(text, rankRect, Color.gray(), Font.boldRoundedSystemFont(19));\n    }\n  \n    const rankRect = new Rect(graphRect.x, graphRect.y - 40, graphRect.width, 30);\n    drawTextR(\"Rank Over the Past \" + history.length + \" Days\", rankRect, Color.white(), Font.boldRoundedSystemFont(24));\n  \n  \n  \n    \/\/ Graph\n    for(let i = 0; i < history.length; i++) {\n      if (i < history.length - 1) {\n        p1 = new Point(lerp(graphRect.minX, graphRect.maxX, i \/ (history.length-1)), lerp(graphRect.minY, graphRect.maxY, percent(parseInt(history[i]), min, max)))  \n        p2 = new Point(lerp(graphRect.minX, graphRect.maxX, (i+1) \/ (history.length-1)), lerp(graphRect.minY, graphRect.maxY, percent(parseInt(history[i+1]), min, max)))\n  \n        drawLine(p1, p2, 3, Color.cyan())\n      }\n    }\n  }\n  \n  return w\n}\n\nfunction kFormatter(num){\n    return Math.abs(num) > 999 ? Math.sign(num)*((Math.abs(num)\/1000).toFixed(1)) + 'k' : Math.sign(num)*Math.abs(num)\n}\n\nfunction drawTextR(text, rect, color, font){\n\tcontext.setFont(font);\n\tcontext.setTextColor(color);\n\tcontext.drawTextInRect(new String(text).toString(), rect);\n}\n\nfunction drawLine(a, b, width, color) {\n  const path = new Path()\n  path.move(a)\n  path.addLine(b)\n  context.addPath(path)\n  context.setStrokeColor(color)\n  context.setLineWidth(width)\n  context.strokePath()\n}\n\nfunction lerp(a, b, t) {\n  return a * (1 - t) + b * t\n}\n\nfunction percent(x, a, b) {\n  return (x - a) \/ (b - a)\n}\n\nfunction formatNumber(num) {\n  return num.toString().replace(\/(\\d)(?=(\\d{3})+(?!\\d))\/g, '$1,')\n}",
  "share_sheet_inputs" : [

  ]
}